#!/bin/bash

# Where are we working?

export TDIR=/l/solr-vufind/apps/ht_traject
export DDIR=/l/solr-vufind/data

export DEFAULT_WRITER=localhost

# A simple function to look for a file, gzipped and not gzipped,
# in both the data dir and the processed dir

function find_data_file() {
  local f="$1"
  local gzf="$1.gz"
  local PDDIR="${DDIR}/processed"
  
  local dn="$DDIR/$f"
  local dz="$DDIR/$gzf"
  local pn="$PDDIR/$f"
  local pz="$PDDIR/$gzf"
  
  for i in "$dn" "$dz" "$pn" "$pz"; do
    if [ -f $i ] 
    then
      echo $i;
      return 0
    fi
  done
}


function find_marc_file_for_date() {
  local datestr=$1
  local marcfilebase=vufind_upd_${datestr}.seq
  find_data_file "$marcfilebase"
}

function find_del_file_for_date() {
  local datestr=$1
  local delfilebase=vufind_upd_${datestr}_delete.log
  find_data_file "$delfilebase"
}

if [ -z $SOLR_PORT ]
then
  echo
  echo "Need to call with the solr port defined"
  echo "e.g.,"
  echo "   SOLR_PORT=8026 catchup_today umich"
  echo
  exit 1
fi

if [ -z $SOLR_CORE ]
then
    echo "SOLR_CORE not defined; defaulting to 'biblio'"
    SOLR_CORE=biblio
fi    

export SOLR_URL="http://localhost:${SOLR_PORT}/solr/${SOLR_CORE}"


# If we're seeing the old version of jruby , ignore it
# and use the newer one

export JRUBY="/l/solr-vufind/apps/jruby/bin/jruby"
export JRUBY_BIN_DIR="/l/solr-vufind/apps/jruby/bin/"
export PATH=$JRUBY_BIN_DIR:$PATH

# Set the reader to Aleph Sequential unless it's being overridden
if [ -z $READER ]
then
  export READER="alephsequential"
fi


# Find yesterday's date, allowing for different implementations of "date"

export datestr=`date --date "now" "+%Y%m%d" 2>/dev/null`
if [ -z $datestr ]
then
  export datestr=` date -v "+%Y%m%d"`
fi


# Base file names:


# Use find_data_file to get the actual files

export marcfile=`find_marc_file_for_date $datestr`
export delfile=`find_del_file_for_date $datestr`

